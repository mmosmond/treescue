initialize() 
{
	defineConstant("simID", getSeed()); //get the random seed to label temporary file
	
	initializeTreeSeq(); //record the tree

	initializeMutationType("m1", h, "f", s); //beneficial mutation characteristics
	m1.mutationStackPolicy = "f"; //keep first mutation
	initializeMutationType("m2", 0.5, "f", 0.0); //neutral mutations (note heritability of 0.5 has no affect)
	initializeGenomicElementType("g1", m1, 1.0); //define element g1 to have beneficial mutations
	initializeGenomicElementType("g2", m2, 1.0); //define element g2 to have neutral mutations
	defineConstant("L0", asInteger(round(L/2))); //location of selected site (middle of simulated region)
	initializeGenomicElement(g1, L0, L0); //element g1 is just one site
	initializeGenomicElement(g2, 0, L0 - 1); // element g2 is everything to the left...
	initializeGenomicElement(g2, L0 + 1, L); // ...and everything to the right of LO
	initializeMutationRate(c(0,u,0), c(L0-1, L0, L)); //mutation rate per site 
	initializeRecombinationRate(r); //recombination rate between sites
	writeFile(output_dynamics, "t n p"); //start writing to the dynamics file  
}
1 early() {
	sim.rescheduleScriptBlock(s1, start=t, end=t); //define end point of sim
	sim.addSubpop("p1", K); //initialize population of wildtypes
	target = sample(p1.genomes, q); //choose q chromosomes without replacement...
	for (i in target)
		 i.addNewDrawnMutation(m1, L0); //... and give beneficial mutation
	sim.outputFull("/tmp/slim_" + simID + ".txt"); //output this initial state to use for future runs if needed
}
1: late() {
	inds = sim.subpopulations.individuals;	
	Nt = length(inds); //population size
	freq = sum(asInteger(inds.genomes.countOfMutationsOfType(m1)>0))/(2*Nt); //frequency of beneficial mutation
	if ((u==0 & freq == 0) | (Nt==0)) { //if fail to adapt
                writeFile(output_dynamics, "t n p"); //erase and restart the output file
		catn("all hope was lost in generation " + sim.generation + " - RESTARTING"); //alert the user
		sim.readFromPopulationFile("/tmp/slim_" + simID + ".txt"); //reinitialize simulation
	}
	else {
		catn(sim.generation + ": " + Nt + ", " + freq); //print generation and population size and frequency of derived allele
		writeFile(output_dynamics, sim.generation + " " + Nt + " " + freq, append=T);
		if (freq > f) { //trying for establishment only, leaving rescue mutation as SNP to be discovered (but note that it is not guaranteed the popn is recovered)
			catn("sweep complete in generation " + sim.generation);
        		sim.simulationFinished(); //end simulation
        		sim.treeSeqOutput(output_trees); //save tree sequence
        	}
	}
}
s1 late () {
	catn("times up, make maxt longer!");
	sim.simulationFinished();
}
